/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.pojos.R;
import common.db.entity.Contact;
import common.db.entity.Conversation;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;

/**
 *
 * @author johny
 */
public class ContactsPane extends javax.swing.JPanel implements Observer, Conventions, TableRenderers, ActionListener {

    private ContactsModel model;
    private List<Conversation> tempConversations = new ArrayList<>();

    /**
     * Creates new form ContactsPane
     */
    public ContactsPane() {
        model = new ContactsModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contactPopupMenu = new javax.swing.JPopupMenu();
        deleteContactMenuItem = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        deleteContactMenuItem.setText("Remove contact");
        deleteContactMenuItem.addActionListener(this);
        contactPopupMenu.add(deleteContactMenuItem);

        setToolTipText("");
        setName("CONTACTSPANE"); // NOI18N

        jLabel1.setBackground(new java.awt.Color(60, 59, 55));
        jLabel1.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Contacts");
        jLabel1.setBorder(null);
        jLabel1.setOpaque(true);

        table.setAutoCreateRowSorter(true);
        table.setModel(model);
        table.setName(""); // NOI18N
        table.setShowHorizontalLines(false);
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new PopupListener(contactPopupMenu));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        Point click = evt.getPoint();
        int rowClicked = table.rowAtPoint(click);
        selectedContact = model.getContact(rowClicked);

        if (rowClicked == -1) {
            return;
        }


        if (evt.getButton() == MouseEvent.BUTTON2) {
        } else {

            int colClicked = table.columnAtPoint(click);
            // Col 2 = chat button, Col 3 = video button
            if (colClicked != 2 && colClicked != 3) {
                return;
            }


            if (selectedContact.getStatus() == Contact.Status.ONLINE) {
                if (!selectedContact.isChatPaneOpened()) {
                    //JPanel tab = findTabByContactId(contact.getId());
                    // send conversation id request to server
                    Conversation conv = new Conversation();
                    conv.setClientGenId(R.getRandom().nextInt());
                    Message m = new Message(CONVERSATION_ID_REQUEST, conv);
                    R.getNm().send(m);
                    // wait for response
                    model.setValueAt(true, rowClicked, colClicked);
                }

            }
        }

    }//GEN-LAST:event_tableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu contactPopupMenu;
    private javax.swing.JMenuItem deleteContactMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    private Contact selectedContact;

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        OQueue q = (OQueue) o;
        final Message m = (Message) q.poll();

        final Conversation conv = (Conversation) m.getContent();
        for (Conversation tempConv : tempConversations) {
            if (tempConv.getClientGenId() == conv.getClientGenId()) {
                tempConversations.remove(tempConv);
                break;
            }
        }


        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                switch (m.getCode()) {
                    case CONVERSATION_ID_RESPONSE:
                        // open tab with conversation id from db
                        ChatPane chatTab = new ChatPane(conv);
                        R.getMf().getT().addTab(ACTIVE_TAB_TITLE, JCHAT_LOGO, chatTab, ACTIVE_TAB_TIP);
                        R.getMf().getT().setSelectedComponent(chatTab);
                        //HibernateUtil.setContactChatOpened()
                        break;
                }
            }
        });


    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JMenuItem source = (JMenuItem) (e.getSource());
        //String contactCommand = source.getActionCommand();
        Contact contactToRemove = selectedContact;

        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to remove "
                + contactToRemove.getUsernameOrEmail() + " from your contacts?",
                "Remove Contact Confirmation",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);


        if (confirmation == JOptionPane.YES_OPTION) {
            Message m = new Message(CONTACT_DELETION, contactToRemove);
            R.getNm().send(m);
        }
    }

    class PopupListener extends MouseAdapter {

        JPopupMenu popup;

        PopupListener(JPopupMenu popupMenu) {
            popup = popupMenu;
        }

        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popup.show(e.getComponent(),
                        e.getX(), e.getY());
            }
        }
    }
}
