/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.db.util.DB;
import client.gui.utils.ContactsModel;
import client.gui.utils.TableRenderers.EmailRenderer;
import client.gui.utils.TableRenderers.IconRenderer;
import client.gui.utils.TableRenderers.StatusRenderer;
import client.gui.utils.TableRenderers.UsernameRenderer;
import client.networking.NetworkManager;
import client.networking.R;
import common.db.entity.Conversation;
import common.db.entity.UserAccount;
import common.db.entity.UserContact;
import common.utils.Conventions;
import common.utils.Message;
import common.utils.MessageType;
import common.utils.OQueue;
import common.utils.Utils;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author johny
 */
public class ContactsPane extends javax.swing.JPanel implements Observer, Conventions, ActionListener {
    // 

    /**
     * Creates new form ContactsPane
     *
     * @param model
     */
    public ContactsPane(ContactsModel model) {
        this.model = model;
        initComponents();

        tempConvs = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contactPopupMenu = new javax.swing.JPopupMenu();
        startChatMenuItem = new javax.swing.JMenuItem();
        videoCallMenuItem = new javax.swing.JMenuItem();
        showContactMenuItem = new javax.swing.JMenuItem();
        deleteContactMenuItem = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        contactPopupMenu.setBackground(java.awt.Color.white);

        startChatMenuItem.setBackground(java.awt.Color.white);
        startChatMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/text_chat/chat-icon24.png"))); // NOI18N
        startChatMenuItem.setText("Chat");
        startChatMenuItem.addActionListener(this);
        contactPopupMenu.add(startChatMenuItem);

        videoCallMenuItem.setBackground(startChatMenuItem.getBackground());
        videoCallMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/video_chat/camera-red24.png"))); // NOI18N
        videoCallMenuItem.setText("Video call");
        videoCallMenuItem.setToolTipText("Coming soon...");
        videoCallMenuItem.setEnabled(false);
        videoCallMenuItem.addActionListener(this);
        contactPopupMenu.add(videoCallMenuItem);

        showContactMenuItem.setBackground(startChatMenuItem.getBackground());
        showContactMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/showInfo/showinfo24.png"))); // NOI18N
        showContactMenuItem.setText("Show info");
        showContactMenuItem.addActionListener(this);
        contactPopupMenu.add(showContactMenuItem);

        deleteContactMenuItem.setBackground(startChatMenuItem.getBackground());
        deleteContactMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete/delete16.png"))); // NOI18N
        deleteContactMenuItem.setText("Delete");
        deleteContactMenuItem.addActionListener(this);
        contactPopupMenu.add(deleteContactMenuItem);

        setBackground(java.awt.Color.white);
        setToolTipText("");
        setName("CONTACTSPANE"); // NOI18N

        jLabel1.setBackground(new java.awt.Color(60, 59, 55));
        jLabel1.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Contacts");
        jLabel1.setOpaque(true);

        jScrollPane1.setBackground(java.awt.Color.white);

        table.setAutoCreateRowSorter(true);
        table.setModel(model);
        TableColumnModel tcm = table.getColumnModel();
        tcm.getColumn(model.findColumn("Icon")).setCellRenderer(new IconRenderer());
        tcm.getColumn(model.findColumn("Username")).setCellRenderer(new UsernameRenderer());
        tcm.getColumn(model.findColumn("Email")).setCellRenderer(new EmailRenderer());
        tcm.getColumn(model.findColumn("Status")).setCellRenderer(new StatusRenderer());
        table.setFocusable(false);
        table.setIntercellSpacing(new Dimension(0,0));
        table.setName(""); // NOI18N
        table.setOpaque(false);
        table.setRowHeight(48);
        table.setSelectionBackground(new java.awt.Color(253, 203, 183));
        table.setTableHeader(null);
        table.addMouseListener(new client.gui.utils.PopupMenuListener(contactPopupMenu));
        table.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tableMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseMoved
        Point click = evt.getPoint();
        rowHovered = table.rowAtPoint(click);

        R.log("Table mouse hovers over row " + rowHovered);
        if (rowHovered != -1) {
            table.setRowSelectionInterval(rowHovered, rowHovered);
        }

    }//GEN-LAST:event_tableMouseMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu contactPopupMenu;
    private javax.swing.JMenuItem deleteContactMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem showContactMenuItem;
    private javax.swing.JMenuItem startChatMenuItem;
    private javax.swing.JTable table;
    private javax.swing.JMenuItem videoCallMenuItem;
    // End of variables declaration//GEN-END:variables
    private UserAccount selectedContact;
    private final ContactsModel model;
    private final List<Conversation> tempConvs;
    private static int rowHovered;

    /**
     * Listens for actions on the popup menu for each contact
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        JMenuItem source = (JMenuItem) (e.getSource());
        String action = source.getActionCommand();

        selectedContact = model.getContact(rowHovered);
        switch (action) {
            case "Chat":
                if (GuiUtils.showOnlineActionOnly(R.getMf())) {
                    return;
                }

                // Check if contact is online
                if (selectedContact.getStatus() == UserAccount.Status.OFFLINE) {
                    return;
                }

                Conversation conv;
                // Check if user has clicked the contact before and has not gotten a response yet              
                for (Conversation tempConv : tempConvs) {
                    Set<UserAccount> parts = tempConv.getParticipants();
                    for (UserAccount part : parts) {
                        if (part.getId().equals(selectedContact.getId())) {
                            JOptionPane.showMessageDialog(this,
                                    "Conversation is about to open.",
                                    "Just a moment",
                                    JOptionPane.PLAIN_MESSAGE);
                            return;
                        }
                    }
                }

                // Check if there is an existing tab opened with this contact alone
                // If not send conv_id_req
                conv = R.getMf().getT().getOneOnOneConversation(selectedContact);
                if (conv == null) {
                    // No open 1-1 conversations with the selected contact
                    conv = new Conversation();
                    conv.setClientGenId(R.getRandom().nextInt());
                    conv.getParticipants().add(R.getUserAccount());
                    conv.getParticipants().add(selectedContact);
                    tempConvs.add(conv);
                    Message m = new Message(MessageType.NEW_CONVERSATION_REQ, conv);
                    NetworkManager.send(m);
                } else {
                    R.getMf().getT().setSelectedConversation(conv.getServerGenId());
                }
                break;

            case "Video call":
                break;
            case "Show info":
                String s = Utils.getUserAccountString(selectedContact);
                JOptionPane.showMessageDialog(this, s, "Contact info", JOptionPane.INFORMATION_MESSAGE);
                break;
            case "Delete":
                if (GuiUtils.showOnlineActionOnly(R.getMf())) {
                    return;
                }

                int choice = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to remove "
                        + selectedContact.getUsername()
                        + " from your contacts?",
                        "Delete Contact Confirmation",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);

                if (choice == JOptionPane.YES_OPTION) {
                    Message m = new Message(MessageType.CONTACT_DELETION, selectedContact.getId());
                    NetworkManager.send(m);
                    model.remove(selectedContact);
                    DB.delete(selectedContact);
                    DB.delete(DB.getUserIcon(selectedContact.getId()));
                    UserContact uc = DB.getUserContact(R.getUserAccount().getId(), selectedContact.getId());
                    if (uc != null) {
                        DB.delete(uc);
                    }
                }
                break;
        }

    }

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        OQueue q = (OQueue) o;
        final Message m = (Message) q.poll();

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                switch (m.getType()) {
                    case NEW_CONVERSATION_DELIVERY:
                        Conversation incomingConv = (Conversation) m.getContent();

                        // Open tab with conversation id from db        
                        R.getMf().getT().addChatTab(incomingConv);
                        break;

                }
            }
        });

        switch (m.getType()) {
            case NEW_CONVERSATION_DELIVERY:
                Conversation incomingConv = (Conversation) m.getContent();

                // Delete tempConv if it was started by me
                for (Conversation tempConv : tempConvs) {
                    if (tempConv.getClientGenId().equals(incomingConv.getClientGenId())) {
                        tempConvs.remove(tempConv);
                        break;
                    }
                }

                break;
        }

    }

}
