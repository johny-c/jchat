/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.db.util.DB;
import client.networking.NetworkManager;
import client.networking.R;
import client.tasks.ConnectionTask;
import common.db.entity.UserAccount;
import common.utils.Conventions;
import common.utils.Message;
import common.utils.MessageType;
import common.utils.OQueue;
import common.utils.Utils;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;
import org.jasypt.util.password.StrongPasswordEncryptor;

/**
 *
 * @author johny
 */
public class UserProfileTab extends javax.swing.JPanel implements Conventions, Observer {

    private final List<String> unavailableUsernames;
    private UtilDateModel model;
    private JDatePanelImpl datePanel;
    private JDatePickerImpl datePicker;
    private UserAccount updatedAccount;
    private ConnectionTask connectionTask;
    private WelcomeTab welcomeTab;

    public UserProfileTab() {
        initComponents();
        unavailableUsernames = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        emailField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        usernameCheckIcon = new javax.swing.JLabel();
        usernameCheckIcon.setVisible(false);
        usernameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        repeatPasswordField = new javax.swing.JPasswordField();
        repeatPasswordLabel = new javax.swing.JLabel();
        emailCheckIcon = new javax.swing.JLabel();
        emailCheckIcon.setVisible(false);
        repeatPasswordCheckIcon = new javax.swing.JLabel();
        repeatPasswordCheckIcon.setVisible(false);
        passwordCheckIcon = new javax.swing.JLabel();
        passwordCheckIcon.setVisible(false);
        signupButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        usernameUnavailableLabel = new javax.swing.JLabel();
        usernameUnavailableLabel.setVisible(false);
        signupLAL = new javax.swing.JLabel();
        signupLAL.setVisible(false);
        birthdateLabel = new javax.swing.JLabel();
        bdPane = new javax.swing.JPanel();
        model = new UtilDateModel();
        Date bd = R.getUserAccount().getBirthDate();
        if(bd != null){
            model.setValue(bd);
        }
        model.setSelected(true);

        datePanel = new JDatePanelImpl(model);
        datePanel.setForeground(Color.WHITE);
        datePicker = new JDatePickerImpl(datePanel);
        datePicker.setSize(284, 36);
        bdPane.add(datePicker);
        deleteAccountButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        unchangedPasswordsLabel = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);
        setName("USERPROFILEPANE"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel2.setText("Email:");
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("client/gui/Bundle"); // NOI18N
        jLabel2.setToolTipText(bundle.getString("emailTooltip")); // NOI18N

        emailField.setText(R.getUserAccount().getEmail());
        emailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailFieldKeyReleased(evt);
            }
        });

        jLabel3.setFont(jLabel2.getFont());
        jLabel3.setText("Username:");
        jLabel3.setToolTipText(bundle.getString("usernameTooltip")); // NOI18N

        usernameCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_ok/ok16.png"))); // NOI18N

        usernameField.setText(R.getUserAccount().getUsername());
        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameFieldKeyReleased(evt);
            }
        });

        jLabel4.setFont(jLabel2.getFont());
        jLabel4.setText("Password:");
        jLabel4.setToolTipText(bundle.getString("passwordTooltip")); // NOI18N

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });

        repeatPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                repeatPasswordFieldKeyReleased(evt);
            }
        });

        repeatPasswordLabel.setFont(jLabel2.getFont());
        repeatPasswordLabel.setText("Repeat Password:");
        repeatPasswordLabel.setToolTipText(bundle.getString("repeatPasswordTooltip")); // NOI18N

        emailCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_ok/ok16.png"))); // NOI18N

        repeatPasswordCheckIcon.setIcon(emailCheckIcon.getIcon());

        passwordCheckIcon.setIcon(emailCheckIcon.getIcon());

        signupButton.setBackground(new java.awt.Color(65, 179, 129));
        signupButton.setForeground(java.awt.Color.white);
        signupButton.setText("Save my new profile");
        signupButton.setBorderPainted(false);
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(102, 102, 102));
        loginButton.setForeground(java.awt.Color.white);
        loginButton.setText("Cancel");
        loginButton.setBorderPainted(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        usernameUnavailableLabel.setForeground(java.awt.Color.red);
        usernameUnavailableLabel.setText(bundle.getString("usernameUnavailableLabel")); // NOI18N

        signupLAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signupLAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/loading_circle_animation/21.gif"))); // NOI18N

        birthdateLabel.setFont(jLabel2.getFont());
        birthdateLabel.setText("Birth Date:");

        javax.swing.GroupLayout bdPaneLayout = new javax.swing.GroupLayout(bdPane);
        bdPane.setLayout(bdPaneLayout);
        bdPaneLayout.setHorizontalGroup(
            bdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        bdPaneLayout.setVerticalGroup(
            bdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        deleteAccountButton.setBackground(new java.awt.Color(0, 51, 51));
        deleteAccountButton.setForeground(java.awt.Color.white);
        deleteAccountButton.setText("Delete my account");
        deleteAccountButton.setBorderPainted(false);
        deleteAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 153, 255));
        jLabel1.setText("Edit your account");

        unchangedPasswordsLabel.setText("If you want to keep your current password leave the password fields blank");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(repeatPasswordLabel)
                    .addComponent(birthdateLabel)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(unchangedPasswordsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(loginButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(signupButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addComponent(signupLAL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(repeatPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bdPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(repeatPasswordCheckIcon)
                                    .addComponent(passwordCheckIcon)
                                    .addComponent(emailCheckIcon)
                                    .addComponent(usernameCheckIcon))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(191, 191, 191))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameUnavailableLabel)
                        .addGap(163, 163, 163))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(131, 131, 131))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(usernameCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameUnavailableLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(emailCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(repeatPasswordCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(repeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(repeatPasswordLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unchangedPasswordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bdPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthdateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signupLAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(deleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed

        if (R.getUserAccount().getStatus() == UserAccount.Status.OFFLINE) {
            JOptionPane.showMessageDialog(this,
                    "You must be online to change your profile!",
                    "You are offline", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (evaluateFields()) {
            setPaneState(false);
            sendChangeProfileRequest();
        }
    }//GEN-LAST:event_signupButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        welcomeTab = new WelcomeTab();
        R.getMf().getT().addTab(
                "JChat - Welcome",
                JCHAT_LOGO, welcomeTab, WELCOME_TAB_TIP);
        R.getMf().getT().setSelectedComponent(welcomeTab);
        R.getMf().getT().remove(UserProfileTab.this);
    }//GEN-LAST:event_loginButtonActionPerformed

    private void emailFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailFieldKeyReleased
        // TODO add your handling code here:
        evaluateEmail(emailField.getText());
    }//GEN-LAST:event_emailFieldKeyReleased

    private void usernameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyReleased
        evaluateUsername(usernameField.getText());
    }//GEN-LAST:event_usernameFieldKeyReleased

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        evaluatePasswords(passwordField.getPassword(), repeatPasswordField.getPassword());
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void repeatPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_repeatPasswordFieldKeyReleased
        //R.log("pw: " + new String(passwordField.getPassword()));
        //R.log("pw r: " + new String(repeatPasswordField.getPassword()));
        R.log(Arrays.toString(repeatPasswordField.getPassword()));
        evaluatePasswords(passwordField.getPassword(), repeatPasswordField.getPassword());
    }//GEN-LAST:event_repeatPasswordFieldKeyReleased

    private void deleteAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountButtonActionPerformed
        if (R.getUserAccount().getStatus() == UserAccount.Status.OFFLINE) {
            JOptionPane.showMessageDialog(this,
                    "You must be online to delete your account!",
                    "You are offline", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int choice = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete your account?",
                "Delete account confirmation", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            setPaneState(false);
            NetworkManager.send(new Message(MessageType.DELETE_ACCOUNT_REQUEST));
        }
    }//GEN-LAST:event_deleteAccountButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bdPane;
    private javax.swing.JLabel birthdateLabel;
    private javax.swing.JButton deleteAccountButton;
    private javax.swing.JLabel emailCheckIcon;
    private javax.swing.JFormattedTextField emailField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordCheckIcon;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel repeatPasswordCheckIcon;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    private javax.swing.JButton signupButton;
    private javax.swing.JLabel signupLAL;
    private javax.swing.JLabel unchangedPasswordsLabel;
    private javax.swing.JLabel usernameCheckIcon;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameUnavailableLabel;
    // End of variables declaration//GEN-END:variables
    private OQueue q;
    private Message m;

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            if (arg.equals(MessageType.NO_CONNECTION_BROADCAST)) {
                setPaneState(true);
            }
            return;
        }

        q = ((OQueue) o);
        m = (Message) q.poll();
        if (m == null) {
            R.log("m is null");
        }
        if (m.getType() == null) {
            R.log("m type is null");
        }
        R.log("SignupTab received " + m.getType().toString());

        switch (m.getType()) {

            case USERNAME_UNAVAILABLE:
                unavailableUsernames.add(updatedAccount.getUsername());
                break;
            case UPDATE_PROFILE_SUCCESS:
                UserAccount uac = (UserAccount) DB.get(R.getUserAccount().getId(), UserAccount.class);
                if (updatedAccount.getPassword() != null) {
                    if (!updatedAccount.getPassword().isEmpty()) {
                        StrongPasswordEncryptor spe = new StrongPasswordEncryptor();
                        uac.setPassword(spe.encryptPassword(updatedAccount.getPassword()));
                    }
                }

                uac.setBirthDate(updatedAccount.getBirthDate());
                uac.setUsername(updatedAccount.getUsername());
                uac.setEmail(updatedAccount.getEmail());
                uac.setStatus(UserAccount.Status.OFFLINE);
                DB.update(uac);
                updatedAccount.setPassword("");
                R.setUserAccount(updatedAccount);
                break;

        }

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                signupLAL.setVisible(false);
                switch (m.getType()) {
                    case USERNAME_UNAVAILABLE:
                        usernameUnavailableLabel.setVisible(true);
                        loginButton.setEnabled(true);
                        signupButton.setEnabled(true);
                        break;

                    case UPDATE_PROFILE_SUCCESS:
                        R.getMf().setUserStatus(UserAccount.Status.OFFLINE);
                        R.getMf().setUserIconLabel(GuiUtils.getDefaultUserIcon());
                        AccountUpdatedTab signupSuccessTab = new AccountUpdatedTab();
                        R.getMf().getT().addTab(PROFILE_UPDATE_SUCCESS_TAB_TITLE,
                                JCHAT_LOGO,
                                signupSuccessTab,
                                PROFILE_UPDATE_SUCCESS_TAB_TIP);
                        R.getMf().getT().setSelectedComponent(signupSuccessTab);
                        R.getMf().getT().remove(UserProfileTab.this);
                        break;

                    case DELETE_ACCOUNT_SUCCESS:
                        R.getMf().setUserStatus(UserAccount.Status.OFFLINE);
                        R.getMf().setUserIconLabel(GuiUtils.getDefaultUserIcon());
                        AccountDeletedTab accountDeletedTab = new AccountDeletedTab();
                        R.getMf().getT().addTab(PROFILE_UPDATE_SUCCESS_TAB_TITLE,
                                JCHAT_LOGO,
                                accountDeletedTab,
                                PROFILE_UPDATE_SUCCESS_TAB_TIP);
                        R.getMf().getT().setSelectedComponent(accountDeletedTab);
                        R.getMf().getT().remove(UserProfileTab.this);
                        break;
                }
            }

        });

    }

    private void sendChangeProfileRequest() {
        // Prepare message to be sent
        updatedAccount = new UserAccount();
        updatedAccount.setEmail(emailField.getText());
        updatedAccount.setUsername(usernameField.getText());
        updatedAccount.setPassword(new String(passwordField.getPassword()));
        Date selectedDate = (Date) datePicker.getModel().getValue();
        if (selectedDate == null) {
            R.log("Birthdate: null");
        } else {
            updatedAccount.setBirthDate(selectedDate);
            R.log("Birthdate: " + selectedDate.toString());
        }
        //R.setUserAccount(USER); // is then used by SIGNUP_SUCCESS by IMH

        // Overwrite the password with zeros for security
        Arrays.fill(passwordField.getPassword(), '0');
        Arrays.fill(repeatPasswordField.getPassword(), '0');

        // Send signup request to the Server
        Message changeProfileRequest = new Message(MessageType.UPDATE_PROFILE_REQUEST, updatedAccount);
        NetworkManager.send(changeProfileRequest);
    }

    private boolean evaluateFields() {
        if (evaluateUsername(usernameField.getText())) {
            if (evaluateEmail(emailField.getText())) {
                if (evaluatePasswords(passwordField.getPassword(), repeatPasswordField.getPassword())) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean evaluateUsername(String text) {
        if (unavailableUsernames.contains(usernameField.getText())) {
            usernameUnavailableLabel.setVisible(true);
            R.log("Username unavailable");
            return false;
        } else {
            usernameUnavailableLabel.setVisible(false);
        }

        boolean valid = Utils.isValidUsername(text);
        usernameCheckIcon.setVisible(valid);
        R.log("Username valid: " + valid);

        return valid;
    }

    private boolean evaluateEmail(String text) {
        boolean valid = text.isEmpty() || Utils.isValidEmailAddress(emailField.getText());
        if (valid) {
            emailCheckIcon.setVisible(true);
        } else {
            emailCheckIcon.setVisible(false);
        }
        return valid;
    }

    private boolean evaluatePasswords(char[] pass1, char[] pass2) {
        if (pass1.length == 0 && pass2.length == 0) {
            passwordCheckIcon.setVisible(true);
            repeatPasswordCheckIcon.setVisible(true);
            return true;
        }

        String password = new String(pass1);
        boolean valid = Utils.isValidPassword(password);
        if (valid) {
            passwordCheckIcon.setVisible(true);
        } else {
            passwordCheckIcon.setVisible(false);
            repeatPasswordCheckIcon.setVisible(false);
            return false;
        }

        if (passwordEqualsConfirmation(pass1, pass2)) {
            repeatPasswordCheckIcon.setVisible(true);
            valid = true;
        } else {
            repeatPasswordCheckIcon.setVisible(false);
            valid = false;
        }

        return valid;
    }

    private boolean passwordEqualsConfirmation(char[] password1, char[] password2) {
        //R.log("Passwords are:");
        //R.log("pw1= " + new String(password1) + ", len=" + password1.length);
        //R.log("pw2= " + new String(password2) + ", len=" + password2.length);
        int len = password1.length;
        if (len != password2.length) {
            return false;
        }

        for (int i = 0; i < len; i++) {
            if (password1[i] != password2[i]) {
                return false;
            }
        }

        return true;
    }

    private void setPaneState(final boolean tru) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                signupButton.setEnabled(tru);
                loginButton.setEnabled(tru);
                signupLAL.setVisible(!tru);
            }
        });
    }

}
