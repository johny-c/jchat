package client.gui;

import client.pojos.R;
import client.pojos.UserSettings;
import common.db.entity.User;
import common.db.entity.UserSession;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import common.pojos.Utils;
import java.awt.event.ItemEvent;
import java.util.Observable;
import java.util.Observer;
import javax.swing.SwingUtilities;
import org.jasypt.util.password.StrongPasswordEncryptor;

/**
 *
 * @author johny
 */
public class LoginTab extends javax.swing.JPanel implements Observer, Conventions {

    private boolean rememberCredentials;
    private Message m;
    private OQueue q;

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(LoginTab.class.getSimpleName())) {
            return;
        }

        q = (OQueue) o;
        m = (Message) q.poll();

        switch (m.getCode()) {
            case LOGIN_RESPONSE:
                int response = (Integer) m.getContent();
                if (response == LOGIN_SUCCESS) {
                    if (rememberCredentials) {
                        UserSettings.set(UserSettings.USERNAME, R.getU().getUsername());
                        UserSettings.set(UserSettings.PASSWORD, R.getU().getPassword());
                    }
                }
                break;
        }

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Stop the loading animation
                loadingAnimationLabel.setVisible(false);

                switch (m.getCode()) {
                    case LOGIN_RESPONSE:
                        int response = (Integer) m.getContent();
                        if (response == LOGIN_SUCCESS) {
                            successfullLogin();
                        } else {
                            failedLogin();
                        }
                        break;

                    case NEW_USER_SESSION:
                        successfullLogin();
                        break;
                }
            }
        });

    }

    /**
     * Creates new form LoginTab
     */
    public LoginTab() {
        initComponents();
        R.getImh().subscribe(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginWelcomeLabel = new javax.swing.JLabel();
        loadingAnimationLabel = new javax.swing.JLabel();
        loadingAnimationLabel.setVisible(false);
        loginButton = new javax.swing.JButton();
        loginRememberMeCheckBox = new javax.swing.JCheckBox();
        createAccountButton = new javax.swing.JButton();
        loginErrorLabel = new javax.swing.JLabel();
        loginErrorLabel.setVisible(false);
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("client/gui/Bundle"); // NOI18N
        setToolTipText(bundle.getString("loginTabToolTip")); // NOI18N
        setMinimumSize(getMinimumSize());
        setName("Login"); // NOI18N
        setVerifyInputWhenFocusTarget(false);

        loginWelcomeLabel.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        loginWelcomeLabel.setForeground(new java.awt.Color(65, 179, 129));
        loginWelcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        loginWelcomeLabel.setText(bundle.getString("loginWelcomeLabel")); // NOI18N
        loginWelcomeLabel.setAlignmentX(0.5F);
        loginWelcomeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        loadingAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingAnimationLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/loading_circle_animation/21.gif"))); // NOI18N
        loadingAnimationLabel.setText(bundle.getString("loadingAnimationLabel")); // NOI18N

        loginButton.setBackground(new java.awt.Color(65, 179, 129));
        loginButton.setForeground(java.awt.Color.white);
        loginButton.setText(bundle.getString("loginButton")); // NOI18N
        loginButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        loginButton.setBorderPainted(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginRememberMeCheckBox.setBackground(getBackground());
        loginRememberMeCheckBox.setText("Remember me");
        loginRememberMeCheckBox.setOpaque(true);
        loginRememberMeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loginRememberMeCheckBoxItemStateChanged(evt);
            }
        });

        createAccountButton.setBackground(new java.awt.Color(78, 110, 187));
        createAccountButton.setForeground(java.awt.Color.white);
        createAccountButton.setText(bundle.getString("loginCreateAccountButton")); // NOI18N
        createAccountButton.setBorderPainted(false);
        createAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountButtonActionPerformed(evt);
            }
        });

        loginErrorLabel.setForeground(java.awt.Color.red);
        loginErrorLabel.setText(bundle.getString("loginErrorLabel")); // NOI18N

        usernameField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        usernameField.setText(UserSettings.get(UserSettings.USERNAME, ""));

        passwordField.setText(UserSettings.get(UserSettings.PASSWORD, ""));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(60, 59, 55));
        jLabel1.setText(bundle.getString("loginUsernameLabel")); // NOI18N

        jLabel2.setFont(jLabel1.getFont());
        jLabel2.setText(bundle.getString("loginPasswordLabel")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(180, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginWelcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(createAccountButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginRememberMeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadingAnimationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordField)
                            .addComponent(usernameField))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(loginWelcomeLabel)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addComponent(loginErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadingAnimationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginRememberMeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        String usernameInput = usernameField.getText();
        String passwordInput = new String(passwordField.getPassword());
        if (Utils.isValidUsername(usernameInput)) {
            if (Utils.isValidPassword(passwordInput)) {
                // Disable loginButton until a response comes back
                loginButton.setEnabled(false);
                // Reset error label in case it was visible
                loginErrorLabel.setVisible(false);
                // Show an animation like loading or progress bar of signing in
                loadingAnimationLabel.setVisible(true);
                // Compare with locally stored credentials
                String storedUsername = UserSettings.get(UserSettings.STORED_USERNAME, "");
                String storedPassword = UserSettings.get(UserSettings.STORED_ENC_PASSWORD, "");
                if (storedUsername.equals("") || storedPassword.equals("")) {
                    // Prepare message to be sent
                    R.getU().setUsername(usernameInput);
                    R.getU().setPassword(passwordInput);
                    // Send NORMAL login request to the Server
                    Message loginRequest = new Message(LOGIN_REQUEST, R.getU());
                    R.getNm().send(loginRequest);
                } else {
                    StrongPasswordEncryptor spe = new StrongPasswordEncryptor();
                    if (usernameInput.equals(storedUsername) && spe.checkPassword(passwordInput, storedPassword)) {
                        // Send request for new session token
                        UserSession us = R.getDb().getLastUserSession();
                        Message m = new Message(NEW_USER_SESSION_REQUEST, us);
                        R.getNm().send(m);
                    } else {
                        // Unsuccessfull login
                        failedLogin();
                    }
                }

                return;
            }
        }
        failedLogin();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void createAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountButtonActionPerformed
        SignupTab signupTab = new SignupTab();
        R.getMf().getT().addTab("JChat - Signup", JCHAT_LOGO, signupTab, "JChat Signup");
        R.getMf().getT().setSelectedComponent(signupTab);
        R.getImh().unsubscribe(this);
        R.getMf().getT().remove(LoginTab.this);
    }//GEN-LAST:event_createAccountButtonActionPerformed

    private void loginRememberMeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_loginRememberMeCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            rememberCredentials = true;
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            rememberCredentials = false;
        }
    }//GEN-LAST:event_loginRememberMeCheckBoxItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createAccountButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel loadingAnimationLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginErrorLabel;
    private javax.swing.JCheckBox loginRememberMeCheckBox;
    private javax.swing.JLabel loginWelcomeLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
    private MainTab mainTab;

    private void successfullLogin() {
        R.getU().setStatus(User.Status.ONLINE);
        R.getMf().changeUserStatusIcon("online");
        R.getImh().unsubscribe(this);

        mainTab = new MainTab();
        R.getMf().getT().addTab("JChat - " + R.getU().getUsernameOrEmail(), JCHAT_LOGO, mainTab, MAIN_TAB_TIP);
        R.getMf().getT().setSelectedComponent(mainTab);
        R.getMf().getT().remove(LoginTab.this);
    }

    private void failedLogin() {
        // update UI
        loginErrorLabel.setVisible(true);
        loginButton.setEnabled(true);
    }
}
