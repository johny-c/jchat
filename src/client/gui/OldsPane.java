/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.db.util.DB;
import client.networking.R;
import common.db.entity.Notification;
import common.utils.Conventions;
import common.utils.Message;
import common.utils.OQueue;
import java.awt.Component;
import java.util.List;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author johny
 */
public final class OldsPane extends javax.swing.JPanel implements Conventions {

    private static int counter = 0;

    /**
     * Creates new form NewsPane
     */
    public OldsPane() {
        initComponents();
        List<Notification> notifs = DB.getOldNotifications();
        for (Notification notif : notifs) {
            addCell(new HistoryCell(notif));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newsPaneLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notificationsListPane = new javax.swing.JPanel();

        setName("HISTORYPANE"); // NOI18N
        setPreferredSize(new java.awt.Dimension(250, 544));

        newsPaneLabel.setBackground(new java.awt.Color(60, 59, 55));
        newsPaneLabel.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        newsPaneLabel.setForeground(java.awt.Color.white);
        newsPaneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newsPaneLabel.setText("History");
        newsPaneLabel.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        newsPaneLabel.setOpaque(true);

        notificationsListPane.setBackground(new java.awt.Color(0, 102, 255));
        notificationsListPane.setLayout(new javax.swing.BoxLayout(notificationsListPane, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane2.setViewportView(notificationsListPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newsPaneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(newsPaneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel newsPaneLabel;
    private static javax.swing.JPanel notificationsListPane;
    // End of variables declaration//GEN-END:variables
    //private DefaultListModel<Notification> model;
    private OQueue q;
    private Message m;

    class NotificationCellRenderer implements ListCellRenderer, Conventions {

        public NotificationCellRenderer() {
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            //Status = BY_SERVER, DELIVERED, READ, HANDLED
            //If status != READ || HANDLED
            HistoryCell component = new HistoryCell((Notification) value);
            //component.setBackground(cellHasFocus ? COLOR_LIGHT_BLACK : Color.WHITE);
            //component.setForeground(cellHasFocus ? Color.white : COLOR_LIGHT_BLACK);
            return component;
        }
    }

    void addCell(HistoryCell nc) {
        notificationsListPane.add(nc);
        counter++;
        R.getMf().updateNotificationsCounter(counter);
        revalidate();
        repaint();
    }

    public void removeCell(HistoryCell nc) {
        notificationsListPane.remove(nc);
        counter--;
        R.getMf().updateNotificationsCounter(counter);
        revalidate();
        repaint();
    }
}
