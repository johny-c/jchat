/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.pojos.R;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import common.pojos.Utils;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author johny
 */
public class SignupTab extends javax.swing.JPanel implements Conventions, Observer {

    List<String> unavailableUsernames;
    UtilDateModel model;
    JDatePanelImpl datePanel;
    JDatePickerImpl datePicker;

    public SignupTab() {
        initComponents();
        unavailableUsernames = new ArrayList<>();
        R.getImh().subscribe(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        emailField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        usernameCheckIcon = new javax.swing.JLabel();
        usernameCheckIcon.setVisible(false);
        usernameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        repeatPasswordField = new javax.swing.JPasswordField();
        repeatPasswordLabel = new javax.swing.JLabel();
        signupRequiredFieldsLabel = new javax.swing.JLabel();
        emailCheckIcon = new javax.swing.JLabel();
        emailCheckIcon.setVisible(false);
        repeatPasswordCheckIcon = new javax.swing.JLabel();
        repeatPasswordCheckIcon.setVisible(false);
        passwordCheckIcon = new javax.swing.JLabel();
        passwordCheckIcon.setVisible(false);
        signupButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        usernameUnavailableLabel = new javax.swing.JLabel();
        usernameUnavailableLabel.setVisible(false);
        loadingAnimation = new javax.swing.JLabel();
        loadingAnimation.setVisible(false);
        birthdateLabel = new javax.swing.JLabel();
        bdPane = new javax.swing.JPanel();
        model = new UtilDateModel();
        datePanel = new JDatePanelImpl(model);
        datePanel.setBackground(Color.WHITE);
        datePicker = new JDatePickerImpl(datePanel);
        datePicker.setSize(284, 36);
        bdPane.add(datePicker);

        setBackground(java.awt.Color.white);

        titleLabel.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(220, 20, 60));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("client/gui/Bundle"); // NOI18N
        titleLabel.setText(bundle.getString("signupTitleLabel")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel2.setText("*Email:");
        jLabel2.setToolTipText(bundle.getString("emailTooltip")); // NOI18N

        emailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailFieldKeyReleased(evt);
            }
        });

        jLabel3.setFont(jLabel2.getFont());
        jLabel3.setText("*Username:");
        jLabel3.setToolTipText(bundle.getString("usernameTooltip")); // NOI18N

        usernameCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/check_ok/ok16.png"))); // NOI18N

        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameFieldKeyReleased(evt);
            }
        });

        jLabel4.setFont(jLabel2.getFont());
        jLabel4.setText("*Password:");
        jLabel4.setToolTipText(bundle.getString("passwordTooltip")); // NOI18N

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });

        repeatPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                repeatPasswordFieldKeyReleased(evt);
            }
        });

        repeatPasswordLabel.setFont(jLabel2.getFont());
        repeatPasswordLabel.setText("*Repeat Password:");
        repeatPasswordLabel.setToolTipText(bundle.getString("repeatPasswordTooltip")); // NOI18N

        signupRequiredFieldsLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        signupRequiredFieldsLabel.setForeground(new java.awt.Color(49, 65, 209));
        signupRequiredFieldsLabel.setText(bundle.getString("signupRequiredFieldsLabel")); // NOI18N

        emailCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/check_ok/ok16.png"))); // NOI18N

        repeatPasswordCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/check_ok/ok16.png"))); // NOI18N

        passwordCheckIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/check_ok/ok16.png"))); // NOI18N

        signupButton.setBackground(new java.awt.Color(78, 110, 187));
        signupButton.setForeground(java.awt.Color.white);
        signupButton.setText("Sign up !");
        signupButton.setBorderPainted(false);
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(65, 179, 129));
        loginButton.setForeground(java.awt.Color.white);
        loginButton.setText("I just wanna log in");
        loginButton.setBorderPainted(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        usernameUnavailableLabel.setForeground(java.awt.Color.red);
        usernameUnavailableLabel.setText(bundle.getString("usernameUnavailableLabel")); // NOI18N

        loadingAnimation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingAnimation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/loading_circle_animation/21.gif"))); // NOI18N

        birthdateLabel.setFont(jLabel2.getFont());
        birthdateLabel.setText("Birth Date:");

        javax.swing.GroupLayout bdPaneLayout = new javax.swing.GroupLayout(bdPane);
        bdPane.setLayout(bdPaneLayout);
        bdPaneLayout.setHorizontalGroup(
            bdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );
        bdPaneLayout.setVerticalGroup(
            bdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3))
                    .addComponent(repeatPasswordLabel)
                    .addComponent(birthdateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(loadingAnimation))
                            .addComponent(titleLabel)
                            .addComponent(signupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bdPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                                    .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailField)
                                    .addComponent(repeatPasswordField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordCheckIcon)
                                    .addComponent(repeatPasswordCheckIcon)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(emailCheckIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(usernameCheckIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(usernameUnavailableLabel))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(signupRequiredFieldsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)))
                        .addGap(204, 204, 204))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(usernameUnavailableLabel)
                        .addComponent(usernameCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(repeatPasswordCheckIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(repeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(repeatPasswordLabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(birthdateLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bdPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(signupRequiredFieldsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(loadingAnimation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        if (emailCheckIcon.isVisible()) {
            if (usernameCheckIcon.isVisible()) {
                if (passwordCheckIcon.isVisible()) {
                    if (repeatPasswordCheckIcon.isVisible()) {
                        signupButton.setEnabled(false);
                        loginButton.setEnabled(false);
                        loadingAnimation.setVisible(true);
                        sendSignupRequest();
                    }
                }
            }
        }
    }//GEN-LAST:event_signupButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        LoginTab loginTab = new LoginTab();
        R.getMf().getT().addTab(LOGIN_TAB_TITLE, JCHAT_LOGO, loginTab, LOGIN_TAB_TIP);
        R.getMf().getT().setSelectedComponent(loginTab);
        R.getImh().unsubscribe(this);
        R.getMf().getT().remove(SignupTab.this);
    }//GEN-LAST:event_loginButtonActionPerformed

    private void emailFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailFieldKeyReleased
        // TODO add your handling code here:
        if (Utils.isValidEmailAddress(emailField.getText())) {
            emailCheckIcon.setVisible(true);
        } else {
            emailCheckIcon.setVisible(false);
        }
    }//GEN-LAST:event_emailFieldKeyReleased

    private void usernameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyReleased
        if (unavailableUsernames.contains(usernameField.getText())) {
            usernameUnavailableLabel.setVisible(true);
            return;
        } else {
            usernameUnavailableLabel.setVisible(false);
        }

        if (Utils.isValidUsername(usernameField.getText())) {
            usernameCheckIcon.setVisible(true);
        } else {
            usernameCheckIcon.setVisible(false);
        }
    }//GEN-LAST:event_usernameFieldKeyReleased

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        if (Utils.isValidPassword(new String(passwordField.getPassword()))) {
            passwordCheckIcon.setVisible(true);
        } else {
            passwordCheckIcon.setVisible(false);
        }
        if (passwordEqualsConfirmation(passwordField.getPassword(), repeatPasswordField.getPassword())) {
            repeatPasswordCheckIcon.setVisible(true);
        } else {
            repeatPasswordCheckIcon.setVisible(false);
        }
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void repeatPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_repeatPasswordFieldKeyReleased
        System.out.println("pw: " + new String(passwordField.getPassword()));
        System.out.println("pw r: " + new String(repeatPasswordField.getPassword()));
        System.out.println(repeatPasswordField.getPassword());
        if (passwordCheckIcon.isVisible()) {
            System.out.println("PWCI is visible");

            if (passwordEqualsConfirmation(passwordField.getPassword(), repeatPasswordField.getPassword())) {
                System.out.println("PWCIR is visible");
                repeatPasswordCheckIcon.setVisible(true);
            } else {
                repeatPasswordCheckIcon.setVisible(false);
            }
        } else {
            repeatPasswordCheckIcon.setVisible(false);
        }
    }//GEN-LAST:event_repeatPasswordFieldKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bdPane;
    private javax.swing.JLabel birthdateLabel;
    private javax.swing.JLabel emailCheckIcon;
    private javax.swing.JFormattedTextField emailField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel loadingAnimation;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordCheckIcon;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel repeatPasswordCheckIcon;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    private javax.swing.JButton signupButton;
    private javax.swing.JLabel signupRequiredFieldsLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel usernameCheckIcon;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameUnavailableLabel;
    // End of variables declaration//GEN-END:variables
    private OQueue q;
    private Message m;

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        q = ((OQueue) o);
        m = (Message) q.poll();
        final int response = (Integer) m.getContent();

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                loadingAnimation.setVisible(false);
                switch (response) {
                    case USERNAME_UNAVAILABLE:
                        usernameUnavailableLabel.setVisible(true);
                        loginButton.setEnabled(true);
                        signupButton.setEnabled(true);
                        break;

                    case SIGNUP_SUCCESS:
                        SignupSuccessTab signupSuccessTab = new SignupSuccessTab();
                        R.getMf().getT().addTab(SIGNUP_SUCCESS_TAB_TITLE, JCHAT_LOGO, signupSuccessTab, SIGNUP_SUCCESS_TAB_TIP);
                        R.getMf().getT().setSelectedComponent(signupSuccessTab);
                        R.getImh().unsubscribe(SignupTab.this);
                        R.getMf().getT().remove(SignupTab.this);
                        break;
                }
            }
        });

        switch (response) {
            case USERNAME_UNAVAILABLE:
                unavailableUsernames.add(R.getU().getUsername());
                break;
        }
    }

    private void sendSignupRequest() {
        // Prepare message to be sent
        R.getU().setEmail(emailField.getText());
        R.getU().setUsername(usernameField.getText());
        R.getU().setPassword(encrypt(passwordField.getPassword()));
        Date selectedDate = (Date) datePicker.getModel().getValue();
        if (selectedDate == null) {
            R.log("Birthdate: null");
        } else {
            R.getU().setBirthDate(selectedDate);
            R.log("Birthdate: " + selectedDate.toString());
        }

        // Try this
        /*
         StrongTextEncryptor ste = new StrongTextEncryptor();
         User ref = R.getU();
         System.out.println("ref pw = " + ref.getPassword());
         R.getU().setPassword("");
         ste.setPassword(R.getU().toString());
         System.out.println("ref pw = " + ref.getPassword());
         String decrypted = ste.decrypt(ref.getPassword());
         System.out.println("Decrypted pw = " + decrypted);
         */
        // Overwrite the password with zeros for security
        Arrays.fill(passwordField.getPassword(), '0');
        Arrays.fill(repeatPasswordField.getPassword(), '0');

        // Send signup request to the Server
        Message signupRequest = new Message(SIGNUP_REQUEST, R.getU());
        R.getNm().send(signupRequest);
        // R.getU().setPassword("");
    }

    private String encrypt(char[] password) {
        //StrongTextEncryptor ste = new StrongTextEncryptor();
        //ste.setPassword(R.getU().toString());
        //return ste.encrypt(new String(password));
        return (new String(password));
    }

    public static void main(String[] args) {
        //R r = new R();
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setSize(1000, 700);
        //f.add(R.getT());
        SignupTab st = new SignupTab();
        //R.getT().addTab(WELCOME, JCHAT_LOGO, st, SIGNUP_TAB_TIP);
        f.add(st);
        //f.pack();
        f.setVisible(true);
    }

    private boolean passwordEqualsConfirmation(char[] password1, char[] password2) {
        System.out.println("Passwords are:");
        System.out.println("pw1= " + new String(password1) + ", len=" + password1.length);
        System.out.println("pw2= " + new String(password2) + ", len=" + password2.length);
        if (password1.length != password2.length) {
            return false;
        }

        for (int i = 0; i < password1.length; i++) {
            if (password1[i] != password2[i]) {
                return false;
            }
        }

        return true;
    }
}
