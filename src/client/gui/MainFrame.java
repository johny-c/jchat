/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.gui.utils.ContactsModel;
import client.networking.NetworkManager;
import client.networking.R;
import common.db.entity.Notification;
import common.db.entity.UserAccount;
import common.utils.Conventions;
import common.utils.Message;
import common.utils.MessageType;
import common.utils.OQueue;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;

/**
 *
 * @author johny
 */
public class MainFrame extends javax.swing.JFrame implements Observer, Conventions {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {

        initComponents();

        notificationsLAL.setVisible(true);
        NEWSPANE = new NewsPane();
        NetworkManager.subscribe(NEWSPANE);
        notificationsLAL.setVisible(false);

        historyLAL.setVisible(true);
        HISTORYPANE = new OldsPane();
        historyLAL.setVisible(false);

        contactsLAL.setVisible(true);
        CONTACTSMODEL = new ContactsModel();
        NetworkManager.subscribe(CONTACTSMODEL);
        CONTACTSPANE = new ContactsPane(CONTACTSMODEL);
        NetworkManager.subscribe(CONTACTSPANE);
        contactsLAL.setVisible(false);

        settingsLAL.setVisible(true);
        SETTINGSPANE = new SettingsPane();
        NetworkManager.subscribe(SETTINGSPANE);
        settingsLAL.setVisible(false);

        addContactsLAL.setVisible(true);
        ADDCONTACTSPANE = new AddContactPane();
        NetworkManager.subscribe(ADDCONTACTSPANE);
        addContactsLAL.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userStatusPopupMenu = new javax.swing.JPopupMenu();
        statusOnlineMenuItem = new javax.swing.JMenuItem();
        statusAwayMenuItem = new javax.swing.JMenuItem();
        statusBusyMenuItem = new javax.swing.JMenuItem();
        statusAppearOfflineMenuItem = new javax.swing.JMenuItem();
        menuPane = new javax.swing.JLayeredPane();
        notificationsButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        contactsButton = new javax.swing.JButton();
        addContactButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        notificationsCounterBackground = new javax.swing.JLabel();
        notificationsCounterBackground.setVisible(false);
        notificationsCounterLabel = new javax.swing.JLabel();
        notificationsCounterLabel.setVisible(false);
        notificationsLAL = new javax.swing.JLabel();
        notificationsLAL.setVisible(false);
        contactsLAL = new javax.swing.JLabel();
        contactsLAL.setVisible(false);
        addContactsLAL = new javax.swing.JLabel();
        addContactsLAL.setVisible(false);
        settingsLAL = new javax.swing.JLabel();
        settingsLAL.setVisible(false);
        historyLAL = new javax.swing.JLabel();
        historyLAL.setVisible(false);
        trayPane = new javax.swing.JPanel();
        userIconLabel = new javax.swing.JLabel();
        userStatusButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        trayArea = new javax.swing.JTextPane();
        tabsScroller = new javax.swing.JScrollPane();
        tabbedPane = new client.gui.ChatTabbedPane();

        statusOnlineMenuItem.setForeground(java.awt.Color.darkGray);
        statusOnlineMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/online16.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("client/gui/Bundle"); // NOI18N
        statusOnlineMenuItem.setText(bundle.getString("statusOnlineMenuItemText")); // NOI18N
        statusOnlineMenuItem.setToolTipText("");
        statusOnlineMenuItem.setMinimumSize(new java.awt.Dimension(16, 16));
        statusOnlineMenuItem.setActionCommand(common.db.entity.UserAccount.Status.ONLINE.toString());
        statusOnlineMenuItem.addActionListener(statusMenuChangeListener);
        userStatusPopupMenu.add(statusOnlineMenuItem);

        statusAwayMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/away16.png"))); // NOI18N
        statusAwayMenuItem.setText(bundle.getString("statusAwayMenuItemText")); // NOI18N
        statusAwayMenuItem.setMinimumSize(new java.awt.Dimension(16, 16));
        statusAwayMenuItem.setActionCommand(common.db.entity.UserAccount.Status.AWAY.toString());
        statusAwayMenuItem.addActionListener(statusMenuChangeListener);
        userStatusPopupMenu.add(statusAwayMenuItem);

        statusBusyMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/busy16.png"))); // NOI18N
        statusBusyMenuItem.setText(bundle.getString("statusBusyMenuItemText")); // NOI18N
        statusBusyMenuItem.setMinimumSize(new java.awt.Dimension(16, 16));
        statusBusyMenuItem.setActionCommand(common.db.entity.UserAccount.Status.BUSY.toString());
        statusBusyMenuItem.addActionListener(statusMenuChangeListener);
        userStatusPopupMenu.add(statusBusyMenuItem);

        statusAppearOfflineMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/appear_offline16.png"))); // NOI18N
        statusAppearOfflineMenuItem.setText(bundle.getString("statusAppearOfflineMenuItemText")); // NOI18N
        statusAppearOfflineMenuItem.setMinimumSize(new java.awt.Dimension(16, 16));
        statusAppearOfflineMenuItem.setActionCommand(common.db.entity.UserAccount.Status.APPEAR_OFFLINE.toString());
        statusAppearOfflineMenuItem.addActionListener(statusMenuChangeListener);
        userStatusPopupMenu.add(statusAppearOfflineMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JChat  " + R.JCHAT_VERSION);
        setBackground(new java.awt.Color(204, 204, 204));
        setBounds(GuiUtils.getPrefferedRectangle());
        setIconImage(GuiUtils.getAppIcon());
        setMinimumSize(new java.awt.Dimension(100, 100));

        menuPane.setBackground(COLOR_PAPAYA);
        menuPane.setForeground(java.awt.Color.orange);
        menuPane.setOpaque(true);
        menuPane.setPreferredSize(new java.awt.Dimension(54, 734));

        notificationsButton.setBackground(new Color(0,0,0,0));
        notificationsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/news/news48.png"))); // NOI18N
        notificationsButton.setToolTipText(bundle.getString("notificationsButtonTooltip")); // NOI18N
        notificationsButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(61, 36, 201), new java.awt.Color(239, 8, 8), new java.awt.Color(242, 222, 11), new java.awt.Color(14, 212, 47)));
        notificationsButton.setBorderPainted(false);
        notificationsButton.setContentAreaFilled(false);
        notificationsButton.setFocusPainted(false);
        notificationsButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        notificationsButton.setMaximumSize(new java.awt.Dimension(50, 50));
        notificationsButton.setMinimumSize(new java.awt.Dimension(48, 48));
        notificationsButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/news/news32.png"))); // NOI18N
        notificationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notificationsButtonActionPerformed(evt);
            }
        });
        menuPane.add(notificationsButton);
        notificationsButton.setBounds(3, 10, 50, 48);

        settingsButton.setForeground(new java.awt.Color(230, 25, 25));
        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/settings/settings48.png"))); // NOI18N
        settingsButton.setToolTipText(bundle.getString("settingsButtonTooltip")); // NOI18N
        settingsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        settingsButton.setBorderPainted(false);
        settingsButton.setContentAreaFilled(false);
        settingsButton.setFocusPainted(false);
        settingsButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/settings/settings32.png"))); // NOI18N
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        menuPane.add(settingsButton);
        settingsButton.setBounds(3, 187, 48, 48);

        contactsButton.setBackground(new Color(0,0,0,0));
        contactsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/contacts/contacts48.png"))); // NOI18N
        contactsButton.setToolTipText(bundle.getString("contactsButtonTooltip")); // NOI18N
        contactsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        contactsButton.setBorderPainted(false);
        contactsButton.setContentAreaFilled(false);
        contactsButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/contacts/contacts32.png"))); // NOI18N
        contactsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactsButtonActionPerformed(evt);
            }
        });
        menuPane.add(contactsButton);
        contactsButton.setBounds(3, 71, 48, 48);

        addContactButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_contact/add-contact48.png"))); // NOI18N
        addContactButton.setToolTipText(bundle.getString("addContactButtonTooltip")); // NOI18N
        addContactButton.setBorderPainted(false);
        addContactButton.setContentAreaFilled(false);
        addContactButton.setFocusPainted(false);
        addContactButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_contact/add-contact32.png"))); // NOI18N
        addContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactButtonActionPerformed(evt);
            }
        });
        menuPane.add(addContactButton);
        addContactButton.setBounds(3, 129, 48, 48);

        historyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/history/history48.png"))); // NOI18N
        historyButton.setToolTipText("History");
        historyButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        historyButton.setBorderPainted(false);
        historyButton.setContentAreaFilled(false);
        historyButton.setFocusPainted(false);
        historyButton.setPreferredSize(new java.awt.Dimension(48, 48));
        historyButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/history/history32.png"))); // NOI18N
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });
        menuPane.add(historyButton);
        historyButton.setBounds(3, 245, 48, 48);

        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout/logout-icon32.png"))); // NOI18N
        logoutButton.setToolTipText(bundle.getString("logoutButtonTooltip")); // NOI18N
        logoutButton.setBorderPainted(false);
        logoutButton.setContentAreaFilled(false);
        logoutButton.setFocusPainted(false);
        logoutButton.setPreferredSize(new java.awt.Dimension(48, 48));
        logoutButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout/logout-icon24.png"))); // NOI18N
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        menuPane.add(logoutButton);
        logoutButton.setBounds(0, 361, 48, 48);

        notificationsCounterBackground.setBackground(new java.awt.Color(94, 203, 64));
        notificationsCounterBackground.setForeground(java.awt.Color.white);
        notificationsCounterBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notificationsCounterBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/notification/counter/plain24.png"))); // NOI18N
        menuPane.add(notificationsCounterBackground);
        notificationsCounterBackground.setBounds(27, 37, 24, 24);
        menuPane.setLayer(notificationsCounterBackground, javax.swing.JLayeredPane.PALETTE_LAYER);

        notificationsCounterLabel.setFont(new java.awt.Font("Nimbus Sans L", 1, 14)); // NOI18N
        notificationsCounterLabel.setForeground(java.awt.Color.white);
        notificationsCounterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notificationsCounterLabel.setText("15");
        notificationsCounterLabel.setAlignmentX(0.5F);
        notificationsCounterLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuPane.add(notificationsCounterLabel);
        notificationsCounterLabel.setBounds(33, 41, 12, 16);
        menuPane.setLayer(notificationsCounterLabel, javax.swing.JLayeredPane.MODAL_LAYER);

        notificationsLAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/loading_circle_animation/21.gif"))); // NOI18N
        menuPane.add(notificationsLAL);
        notificationsLAL.setBounds(12, 20, 32, 32);
        menuPane.setLayer(notificationsLAL, javax.swing.JLayeredPane.POPUP_LAYER);

        contactsLAL.setIcon(notificationsLAL.getIcon());
        menuPane.add(contactsLAL);
        contactsLAL.setBounds(12, 79, 32, 32);
        menuPane.setLayer(contactsLAL, javax.swing.JLayeredPane.POPUP_LAYER);

        addContactsLAL.setIcon(notificationsLAL.getIcon());
        menuPane.add(addContactsLAL);
        addContactsLAL.setBounds(12, 137, 32, 32);
        menuPane.setLayer(addContactsLAL, javax.swing.JLayeredPane.POPUP_LAYER);

        settingsLAL.setIcon(notificationsLAL.getIcon());
        menuPane.add(settingsLAL);
        settingsLAL.setBounds(12, 195, 32, 32);
        menuPane.setLayer(settingsLAL, javax.swing.JLayeredPane.POPUP_LAYER);

        historyLAL.setIcon(notificationsLAL.getIcon());
        menuPane.add(historyLAL);
        historyLAL.setBounds(10, 250, 32, 32);
        menuPane.setLayer(historyLAL, javax.swing.JLayeredPane.POPUP_LAYER);

        trayPane.setBackground(java.awt.Color.darkGray);
        trayPane.setMaximumSize(new java.awt.Dimension(32767, 80));
        trayPane.setMinimumSize(new java.awt.Dimension(166, 73));

        userIconLabel.setForeground(java.awt.Color.white);
        userIconLabel.setIcon(GuiUtils.getDefaultUserIcon());

        userStatusButton.setForeground(new java.awt.Color(255, 255, 255));
        userStatusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/offline24.png"))); // NOI18N
        userStatusButton.setBorderPainted(false);
        userStatusButton.setContentAreaFilled(false);
        userStatusButton.setFocusPainted(false);
        userStatusButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        userStatusButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        userStatusButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        userStatusButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/status/offline16.png"))); // NOI18N
        userStatusButton.addMouseListener(new client.gui.utils.PopupMenuListener(userStatusPopupMenu));

        trayArea.setEditable(false);
        trayArea.setBackground(new java.awt.Color(243, 234, 190));
        trayArea.setBorder(null);
        trayArea.setForeground(java.awt.Color.blue);
        jScrollPane1.setViewportView(trayArea);

        javax.swing.GroupLayout trayPaneLayout = new javax.swing.GroupLayout(trayPane);
        trayPane.setLayout(trayPaneLayout);
        trayPaneLayout.setHorizontalGroup(
            trayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        trayPaneLayout.setVerticalGroup(
            trayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, trayPaneLayout.createSequentialGroup()
                        .addComponent(userIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(userStatusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabsScroller.setMinimumSize(new java.awt.Dimension(603, 623));
        tabsScroller.setName(""); // NOI18N

        tabbedPane.setBackground(java.awt.Color.white);
        tabbedPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(164, 62, 62), null, null));
        tabbedPane.setMaximumSize(new java.awt.Dimension(600, 620));
        tabbedPane.setMinimumSize(new java.awt.Dimension(600, 620));
        tabbedPane.setPreferredSize(new java.awt.Dimension(600, 620));
        tabsScroller.setViewportView(tabbedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trayPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabsScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(trayPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tabsScroller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(menuPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuPane.getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void contactsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactsButtonActionPerformed

        getT().addAppTab("Contacts", JCHAT_LOGO, CONTACTSPANE, "Contacts");
    }//GEN-LAST:event_contactsButtonActionPerformed

    private void notificationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notificationsButtonActionPerformed

        getT().addAppTab("News", JCHAT_LOGO, NEWSPANE, "News");
    }//GEN-LAST:event_notificationsButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed

        getT().addAppTab("Settings", JCHAT_LOGO, SETTINGSPANE, "Settings");
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        if (R.getUserAccount().getStatus() == UserAccount.Status.OFFLINE) {
            R.terminate();
        } else {
            setUserStatus(UserAccount.Status.OFFLINE);
            setUserIconLabel(GuiUtils.getDefaultUserIcon());
            getT().removeAll();
            LoginTab loginTab = new LoginTab();
            getT().addTab(loginTab.getName(), JCHAT_LOGO, loginTab, LOGIN_TAB_TIP);
            Message logout = new Message(MessageType.LOGOUT_REQUEST);
            NetworkManager.send(logout);
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void addContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactButtonActionPerformed

        getT().addAppTab("Add a contact", JCHAT_LOGO, ADDCONTACTSPANE, "Add a contact");
    }//GEN-LAST:event_addContactButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed

        getT().addAppTab("History", JCHAT_LOGO, HISTORYPANE, "History");
    }//GEN-LAST:event_historyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContactButton;
    private javax.swing.JLabel addContactsLAL;
    private javax.swing.JButton contactsButton;
    private javax.swing.JLabel contactsLAL;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel historyLAL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLayeredPane menuPane;
    private javax.swing.JButton notificationsButton;
    private javax.swing.JLabel notificationsCounterBackground;
    private javax.swing.JLabel notificationsCounterLabel;
    private javax.swing.JLabel notificationsLAL;
    private javax.swing.JButton settingsButton;
    private javax.swing.JLabel settingsLAL;
    private javax.swing.JMenuItem statusAppearOfflineMenuItem;
    private javax.swing.JMenuItem statusAwayMenuItem;
    private javax.swing.JMenuItem statusBusyMenuItem;
    private javax.swing.JMenuItem statusOnlineMenuItem;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JScrollPane tabsScroller;
    private javax.swing.JTextPane trayArea;
    private javax.swing.JPanel trayPane;
    private javax.swing.JLabel userIconLabel;
    private javax.swing.JButton userStatusButton;
    private javax.swing.JPopupMenu userStatusPopupMenu;
    // End of variables declaration//GEN-END:variables
    private static NewsPane NEWSPANE;
    private static OldsPane HISTORYPANE;
    private static ContactsModel CONTACTSMODEL;
    private static ContactsPane CONTACTSPANE;
    private static SettingsPane SETTINGSPANE;
    private static AddContactPane ADDCONTACTSPANE;
    private OQueue q;
    private Message m;

    private final ActionListener statusMenuChangeListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            JMenuItem source = (JMenuItem) (e.getSource());
            String newStatus = source.getActionCommand();
            UserAccount USER = R.getUserAccount();
            if (USER.getStatus() != UserAccount.Status.OFFLINE) {
                USER.setStatus(UserAccount.Status.valueOf(newStatus));
                GuiUtils.setStatus(USER.getStatus(), userStatusButton, userIconLabel);

                Message m = new Message(MessageType.USER_UPDATE, USER);
                NetworkManager.send(m);
            }
        }
    };

    public ChatTabbedPane getT() {
        return (ChatTabbedPane) tabbedPane;
    }

    NewsPane getNewsPane() {
        return NEWSPANE;
    }

    public SettingsPane getSettingsPane() {
        return SETTINGSPANE;
    }

    void updateNotificationsCounter(int counter) {
        notificationsCounterLabel.setText("" + counter + "");
        if (counter == 0) {
            notificationsCounterBackground.setVisible(false);
            notificationsCounterLabel.setVisible(false);
        } else {
            if (!notificationsCounterBackground.isVisible()) {
                notificationsCounterBackground.setVisible(true);
            }
            if (!notificationsCounterLabel.isVisible()) {
                notificationsCounterLabel.setVisible(true);
            }
        }
    }

    public void openInvitationPane() {
    }

    @Override
    public void update(Observable o, Object arg) {
        q = (OQueue) o;

        if (!arg.equals(this.getClass().getSimpleName())) {
            if (arg.equals(MessageType.NO_CONNECTION_BROADCAST)) {
                setUserStatus(UserAccount.Status.OFFLINE);
                setUserIconLabel(GuiUtils.getDefaultUserIcon());
                m = q.peek();
                GuiUtils.writeToTray((String) m.getContent(), trayArea);

                getT().removeAll();
                LoginTab loginTab = new LoginTab();
                getT().addTab(loginTab.getName(), JCHAT_LOGO, loginTab, LOGIN_TAB_TIP);
            }
        }
    }

    void setUserStatus(UserAccount.Status status) {
        R.getUserAccount().setStatus(status);
        GuiUtils.setStatus(status, userStatusButton, userIconLabel);
    }

    void setUserIconLabel(ImageIcon icon) {
        userIconLabel.setIcon(icon);
    }

    void putInHistory(Notification notif) {
        HISTORYPANE.addCell(new HistoryCell(notif));
    }

    void subscribeStandardTabs() {
        NetworkManager.subscribe(NEWSPANE);
        NetworkManager.subscribe(CONTACTSMODEL);
        NetworkManager.subscribe(CONTACTSPANE);
        //NetworkManager.subscribe(HISTORYPANE);
        NetworkManager.subscribe(SETTINGSPANE);
        NetworkManager.subscribe(ADDCONTACTSPANE);
    }

}
