/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.db.util.DB;
import client.networking.NetworkManager;
import client.networking.R;
import common.db.entity.Conversation;
import common.db.entity.ConversationParticipant;
import common.db.entity.UserAccount;
import common.utils.Conventions;
import common.utils.Message;
import common.utils.MessageType;
import java.awt.Component;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Observer;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;

/**
 *
 * @author johny
 */
public class ChatTabbedPane extends JTabbedPane implements Conventions {

    private final Map<Integer, ChatPane> conv2paneMap; // mapping conversation - panel
    private final Map<Component, JScrollPane> scrollersMap;

    public ChatTabbedPane() {
        super();
        conv2paneMap = new HashMap<>();
        scrollersMap = new HashMap<>();
        //initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void addTab(String title, Icon icon, Component component, String tip) {
        printComponents();
        R.log("ADDING  TAB " + component.getClass().getSimpleName());
        if (component instanceof Observer) {
            NetworkManager.subscribe((Observer) component);
        }
        JScrollPane scroller = new JScrollPane(component);
        scroller.setBorder(BorderFactory.createEmptyBorder());
        //scroller
        scroller.getVerticalScrollBar().setUnitIncrement(16);
        scrollersMap.put(component, scroller);
        super.addTab(title, icon, scroller, tip);
        printComponents();
    }

    /**
     * APP TABS ARE: NEWSPANE, ADD CONTACTS PANE, CONTACTS PANE, HISTORY PANE,
     * SETTINGS PANE
     *
     * @param title
     * @param icon
     * @param component
     * @param tip
     */
    void addAppTab(String title, Icon icon, Component component, String tip) {
        printComponents();
        R.log("ADDING STANDARD TAB " + component.getClass().getSimpleName());
        int index;
        JScrollPane scroller = scrollersMap.get(component);

        if (scroller == null) {
            R.log("\n\nADDING STANDARD TAB: " + title);
            addTab(title, icon, component, tip);
            index = indexOfComponent(scrollersMap.get(component));
            setTabComponentAt(index, new AppTabComponent(ChatTabbedPane.this, component));
        } else {
            R.log("\n\nSETTING SELECTED STANDARD TAB: " + title);
        }
        printComponents();
        setSelectedComponent(component);
    }

    void removeAppTab(Component component) {
        printComponents();
        R.log("REMOVING STANDARD TAB " + component.getClass().getSimpleName());
        super.remove(scrollersMap.get(component));
        scrollersMap.remove(component);
        printComponents();

    }

    @Override
    public void remove(Component component) {
        printComponents();
        R.log("REMOVING TAB " + component.getClass().getSimpleName());
        if (component instanceof Observer) {
            NetworkManager.unsubscribe((Observer) component);
        }
        super.remove(scrollersMap.get(component));
        scrollersMap.remove(component);
        printComponents();
    }

    @Override
    public void setSelectedComponent(Component component) {
        super.setSelectedComponent(scrollersMap.get(component));
    }

    /**
     * Bring an existing conversation pane to the front
     *
     * @param existingConversationId
     */
    void setSelectedConversation(Integer existingConversationId) {

        ChatPane chatPane = conv2paneMap.get(existingConversationId);
        if (chatPane != null) {
            setSelectedComponent(chatPane);
        }

    }

    /**
     * Open a new Chat Tab mapping to a delivered conversation
     *
     * @param conv
     */
    public void addChatTab(Conversation conv) {
        Set<UserAccount> parts = conv.getParticipants();
        String title = "";
        for (UserAccount part : parts) {
            if (!Objects.equals(part.getId(), R.getUserAccount().getId())) {
                title += part.getUsername() + ", ";
            }
        }
        title = title.substring(0, title.length() - 2);

        ChatPane chatPane = new ChatPane(conv.getServerGenId());
        addTab(title, JCHAT_LOGO, chatPane, ACTIVE_TAB_TIP); // adding tab to tabbed pane
        int index = indexOfComponent(scrollersMap.get(chatPane));
        R.log("Setting the conv tab with convid= " + conv.getServerGenId());
        setTabComponentAt(index, new ChatTabComponent(this, conv.getServerGenId())); // setting the component for the tab
        setSelectedComponent(chatPane);
        conv2paneMap.put(conv.getServerGenId(), chatPane); // holding a mapping between conversation - panel
    }

    /**
     * Called from the Close Button
     *
     * @param convId
     */
    public void removeChatTab(Integer convId) {
        R.log("Getting from db the conv with convid= " + convId);
        for (Conversation c : DB.getConversations()) {
            R.log("In DB there is conv with id=" + c.getServerGenId());
        }
        boolean confirm = false;
        Conversation conv = (Conversation) DB.get(convId, Conversation.class);

        if (conv.getStatus() == Conversation.Status.INACTIVE) {
            confirm = true;
        } else {
            int choice = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to close this tab ?",
                    "Close tab confirmation",
                    JOptionPane.YES_NO_CANCEL_OPTION);

            if (choice == JOptionPane.YES_OPTION) {
                confirm = true;
            }
        }

        R.log("\n\n CONFIRM IS " + confirm + " ! \n\n");
        if (confirm) {
            ChatPane chatPane = conv2paneMap.get(convId);
            Message m = new Message(MessageType.USER_LEFT_CONVERSATION, convId);
            NetworkManager.send(m);
            //NetworkManager.unsubscribe(chatPane);
            remove(chatPane);
            conv2paneMap.remove(convId);
        }
    }

    @Override
    public void removeAll() {
        setSelectedIndex(-1);

        // Remove the Chat Tabs
        Set<Integer> convIds = conv2paneMap.keySet();
        for (Integer convId : convIds) {
            ChatPane chatPane = conv2paneMap.get(convId);
            Message m = new Message(MessageType.USER_LEFT_CONVERSATION, convId);
            NetworkManager.send(m);
            NetworkManager.unsubscribe(chatPane);
            remove(chatPane);
            conv2paneMap.remove(convId);
        }

        // Remove the other tabs
        NetworkManager.unsubscribeAll();
        super.removeAll();
        R.getMf().subscribeStandardTabs();

        R.log("Removed all tabs");
    }

    /**
     * Get the one on one conversation with a contact if it exists
     *
     * @param selectedContact
     * @return
     */
    Conversation getOneOnOneConversation(UserAccount selectedContact) {
        Set<Integer> convIds = conv2paneMap.keySet();
        Conversation conv;
        for (Integer convId : convIds) {
            List<ConversationParticipant> parts = DB.getConvParticipants(convId);
            if (parts.size() == 2) {
                for (ConversationParticipant part : parts) {
                    if (part.getParticipantId().equals(selectedContact.getId())) {
                        conv = (Conversation) DB.get(convId, Conversation.class);
                        return conv;
                    }
                }
            }
        }

        return null;
    }

    private void printComponents() {
        String s = "\nCURRENT COMPONENTS IN SCROLLERS MAP:\n\n";
        for (Component c : scrollersMap.keySet()) {
            s += c.getClass().getSimpleName() + "\n";
        }
        R.log(s + "\n\n");
    }

}
