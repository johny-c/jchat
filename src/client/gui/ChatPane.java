/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.pojos.UserSettings;
import client.pojos.R;
import client.pojos.FileUploader;
import common.db.entity.ChatMessage;
import common.db.entity.Conversation;
import common.db.entity.FileTransfer;
import common.db.entity.Participant;
import client.db.util.Database;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import common.pojos.Utils;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;

/**
 *
 * @author johny
 */
public class ChatPane extends javax.swing.JPanel implements Conventions, Observer, PropertyChangeListener {

    /**
     * Creates new form ChatPane
     */
    public ChatPane() {
        db = new Database();
        tempChatMessages = new ArrayList<>();
        //us = new UserSettings();
        initComponents();
    }

    ChatPane(Conversation conv) {
        this();
        this.conversation = conv;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        historyPane = new javax.swing.JTextPane();
        buttonsPane = new javax.swing.JPanel();
        colorChooserButton = new javax.swing.JButton();
        inviteButton = new javax.swing.JButton();
        sendFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputPane = new javax.swing.JTextPane();

        jScrollPane3.setViewportView(historyPane);

        buttonsPane.setBackground(new java.awt.Color(242, 216, 189));

        colorChooserButton.setBackground(new java.awt.Color(238, 111, 18));
        colorChooserButton.setForeground(java.awt.Color.white);
        colorChooserButton.setText("Change text color");
        colorChooserButton.setBorderPainted(false);
        colorChooserButton.setFocusPainted(false);
        colorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });

        inviteButton.setBackground(new java.awt.Color(207, 101, 101));
        inviteButton.setForeground(java.awt.Color.white);
        inviteButton.setText("Invite others");
        inviteButton.setToolTipText("Coming soon...");
        inviteButton.setBorderPainted(false);
        inviteButton.setFocusPainted(false);
        inviteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteButtonActionPerformed(evt);
            }
        });

        sendFileButton.setBackground(java.awt.Color.darkGray);
        sendFileButton.setForeground(java.awt.Color.white);
        sendFileButton.setText("Send file");
        sendFileButton.setBorderPainted(false);
        sendFileButton.setFocusPainted(false);
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPaneLayout = new javax.swing.GroupLayout(buttonsPane);
        buttonsPane.setLayout(buttonsPaneLayout);
        buttonsPaneLayout.setHorizontalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(colorChooserButton)
                .addGap(27, 27, 27)
                .addComponent(inviteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(sendFileButton)
                .addGap(33, 33, 33))
        );
        buttonsPaneLayout.setVerticalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendFileButton)
                    .addComponent(inviteButton)
                    .addComponent(colorChooserButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputPane.setForeground(new Color(us.getPrefs().getInt(UserSettings.TEXT_COLOR, Color.BLACK.getRGB())));
        inputPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputPaneKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(inputPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(buttonsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(buttonsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void colorChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserButtonActionPerformed
        int savedColor = us.getPrefs().getInt(UserSettings.TEXT_COLOR, Color.BLACK.getRGB());

        Color newColor = JColorChooser.showDialog(
                ChatPane.this,
                "Choose how your text is colored",
                new Color(savedColor));

        if (newColor != null) {
            us.getPrefs().putInt(UserSettings.TEXT_COLOR, newColor.getRGB());
            inputPane.setForeground(newColor);
        }
    }//GEN-LAST:event_colorChooserButtonActionPerformed

    private void inviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteButtonActionPerformed
        R.getMf().openInvitationPane();
    }//GEN-LAST:event_inviteButtonActionPerformed

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileButtonActionPerformed
        int returnVal = fc.showOpenDialog(ChatPane.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileTransfer ft = new FileTransfer();
            ft.setSenderPath(fc.getSelectedFile().getAbsolutePath());
            ft.setFileSize((int) fc.getSelectedFile().length());
            ft.setConversationId(conversation.getServerGenId());
            ft.setTimeSent(new Date());
            ft.setStatus(FileTransfer.Status.BY_SOURCE);
            Message m = new Message(FILE_SEND_REQ);
        }
    }//GEN-LAST:event_sendFileButtonActionPerformed

    private ChatMessage prepareChatMessageOut(String text) {
        ChatMessage cm = new ChatMessage();
        cm.setBody(text);
        cm.setSourceUserId(R.getU().getId());
        cm.setTimeSent(new Date());
        cm.setStatus(ChatMessage.Status.BY_SOURCE);
        cm.setConversationId(conversation.getServerGenId());
        return cm;
    }

    private void inputPaneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPaneKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String textInput = inputPane.getText();
            if (!Utils.isValidChatMessage(textInput)) {
                return;
            }

            inputPane.setText("");
            ChatMessage cm = prepareChatMessageOut(textInput);
            Message m;
            for (Participant p : conversation.getParticipants()) {
                cm.setClientGenId(R.getRandom().nextInt());
                cm.setTargetUserId(p.getId());
                m = new Message(CHAT_MSG_SEND_REQ, cm);
                tempChatMessages.add(cm);
                R.getNm().send(m);
            }
        }

    }//GEN-LAST:event_inputPaneKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPane;
    private javax.swing.JButton colorChooserButton;
    private javax.swing.JTextPane historyPane;
    private javax.swing.JTextPane inputPane;
    private javax.swing.JButton inviteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton sendFileButton;
    // End of variables declaration//GEN-END:variables
    private Database db;
    private Conversation conversation;
    private List<ChatMessage> tempChatMessages;
    private UserSettings us;
    private final JFileChooser fc = new JFileChooser();
    private FileInputStream fin;
    private JProgressBar progressBar;
    private JFrame progressFrame;

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new ChatPane());
        f.setVisible(true);
        f.pack();
    }

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        OQueue q = (OQueue) o;
        Message m = (Message) q.poll();
        if (m == null) {
            return;
        }

        int messageCode = m.getCode();
        FileTransfer fileIn = null;
        ChatMessage cmIn = null;
        Integer convIdIn;

        switch (m.getCode()) {
            case FILE_SEND_ACK:
            case FILE_SEND_REJECTION:
            case FILE_DELIVERY_REPORT:
                fileIn = (FileTransfer) m.getContent();
                convIdIn = fileIn.getConversationId();
                break;

            default:
                cmIn = (ChatMessage) m.getContent();
                convIdIn = cmIn.getConversationId();
                break;
        }

        // If the conversation id matches another tab ignore it
        if (convIdIn != conversation.getServerGenId()) {
            return;
        }

        switch (messageCode) {

            case CHAT_MSG_SEND_ACK:

                // Find message locally by client generated cmsg_id
                for (ChatMessage tempCM : tempChatMessages) {
                    if (tempCM.getClientGenId() == cmIn.getClientGenId()) {
                        displayChatMessage(tempCM, false);
                        tempChatMessages.remove(tempCM);
                        break;
                    }
                }

                break;

            case CHAT_MSG_DELIVERY:
                displayChatMessage(cmIn, true);
                break;

            case CHAT_MSG_DELIVERY_REPORT:
                displayReport(cmIn);
                break;

            case FILE_SEND_ACK:            // Start file upload
                uploadFile(fileIn);
                break;

            case FILE_SEND_REJECTION:
                showFileTransferRejectionDialog();
                break;

            case FILE_DELIVERY_REPORT:
                displayReport(fileIn);
        }

    }

    private void displayChatMessage(ChatMessage cm, boolean received) {
        StringBuilder builder = new StringBuilder();
        builder.append(cm.getTimeSent().toString());
        builder.append(" - ");
        if (received) {
            builder.append(cm.getSourceName());
        } else {
            builder.append(R.getU().getUsernameOrEmail()); // message sent by me
        }
        builder.append(": ");
        builder.append(cm.getBody());
        builder.append("\n");
        putStringOnDisplay(builder.toString());
    }

    private void displayReport(ChatMessage cm) {
        String s = "\n -- MESSAGE DELIVERED to -- ";
        s += cm.getTargetName();
        s += "\n\n";
        putStringOnDisplay(s);
    }

    private void displayReport(FileTransfer f) {
        String s = "\n -- FILE DELIVERED to -- ";
        s += f.getTargetName();
        s += "\n\n";
        putStringOnDisplay(s);
    }

    private void putStringOnDisplay(final String string) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                int offset = historyPane.getStyledDocument().getLength();
                try {
                    historyPane.getStyledDocument().insertString(offset, string, null);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void uploadFile(FileTransfer fileTransfer) {

        try {
            fin = new FileInputStream(fileTransfer.getSenderPath());
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(ChatPane.this, "The file you want to send is not found!", "File not found!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        sendFileButton.setEnabled(false);
        progressFrame = new JFrame();
        progressFrame.setSize(400, 50);
        progressFrame.setTitle("Sending " + fileTransfer.getFileName());
        progressBar = new JProgressBar(0, 100);
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        progressFrame.add(progressBar);
        progressFrame.setVisible(true);
        FileUploader task = new FileUploader(fileTransfer, ChatPane.this);
        task.addPropertyChangeListener(this);
        task.execute();

    }

    private void showFileTransferRejectionDialog() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JOptionPane.showMessageDialog(ChatPane.this,
                        "Your file cannot be sent, maybe it's too large.",
                        "File transfer aborted", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    /**
     * Invoked when FileUploader's progress property changes.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }
    }
}
