/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.pojos.FileDownloader;
import client.pojos.R;
import client.pojos.SoftwareUpdater;
import common.db.entity.FileTransfer;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author johny
 */
public class SoftwareUpdateFrame extends javax.swing.JFrame implements Conventions, Observer {

    FileTransfer fileTransfer;
    FileDownloader softwareDownloader;
    SoftwareUpdater task;

    /**
     * Creates new form SoftwareUpdateFrame
     */
    public SoftwareUpdateFrame() {
        initComponents();
        R.getImh().subscribe(this);
        R.getNm().send(new Message(JCHAT_FILE_ID_REQUEST));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        updateProcessLabel = new javax.swing.JLabel();
        startNewJChatButton = new javax.swing.JButton();
        startNewJChatButton.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        updateProcessLabel.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        updateProcessLabel.setText("Downloading new JChat version . . .");

        startNewJChatButton.setBackground(java.awt.Color.darkGray);
        startNewJChatButton.setForeground(java.awt.Color.white);
        startNewJChatButton.setText("Start New JChat version");
        startNewJChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNewJChatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(updateProcessLabel)
                        .addGap(162, 162, 162))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(startNewJChatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addComponent(updateProcessLabel)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startNewJChatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startNewJChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNewJChatButtonActionPerformed
        try {
            /*
             ProcessBuilder pb = new ProcessBuilder("/path/to/java", "-jar", "your.jar");
             pb.directory(new File("preferred/working/directory"));
             try {
             Process p = pb.start();
             } catch (IOException ex) {
             Logger.getLogger(SoftwareUpdateFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             * */
            Runtime.getRuntime().exec("java -jar ./ePaymentUpdater.jar");
        } catch (IOException ex) {
            Logger.getLogger(SoftwareUpdateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        R.releaseAll();
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_startNewJChatButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startNewJChatButton;
    private javax.swing.JLabel updateProcessLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        OQueue q = (OQueue) o;
        Message m = (Message) q.poll();

        switch (m.getCode()) {
            case JCHAT_FILE_ID_RESPONSE:
                Integer fileId = (Integer) m.getContent();
                softwareDownloader = new FileDownloader(fileId, this);
                softwareDownloader.addPropertyChangeListener(new DownloadPropertyChangeListener());
                softwareDownloader.execute();
                break;
        }
    }

    private class DownloadPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("progress" == evt.getPropertyName()) {
                int progress = (Integer) evt.getNewValue();
                progressBar.setValue(progress);
            }

            if ("state" == evt.getPropertyName()) {
                if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                    //progressBar.setVisible(false);
                    //downloadFileButton.setEnabled(true);
                    //R.getNm().send(new Message(FILE_DOWNLOAD_COMPLETED, ftToDo));
                    task = new SoftwareUpdater(SoftwareUpdateFrame.this);
                    task.addPropertyChangeListener(new UpdatePropertyChangeListener());
                    task.execute();
                }
            }
        }
    }

    private class UpdatePropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("progress" == evt.getPropertyName()) {
                int progress = (Integer) evt.getNewValue();
                progressBar.setValue(progress);
            }

            if ("state" == evt.getPropertyName()) {
                if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                    //progressBar.setVisible(false);
                    //downloadFileButton.setEnabled(true);
                    //R.getNm().send(new Message(FILE_DOWNLOAD_COMPLETED, ftToDo));
                    progressBar.setVisible(false);
                    startNewJChatButton.setVisible(true);

                }
            }
        }
    }
}
