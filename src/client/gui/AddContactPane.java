/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.pojos.R;
import common.db.entity.User;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import common.pojos.UsersList;
import common.pojos.Utils;
import common.db.entity.AddContactRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johny
 */
public class AddContactPane extends javax.swing.JPanel implements Observer, Conventions {

    /**
     * Creates new form AddContactPane
     */
    public AddContactPane() {
        this.tempACRs = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newsPaneLabel = new javax.swing.JLabel();
        searchUserField = new javax.swing.JFormattedTextField();
        searchUserButton = new javax.swing.JButton();
        resultsPane = new javax.swing.JPanel();
        resultsPane.setVisible(false);
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersFoundTable = new javax.swing.JTable();
        addContactButton = new javax.swing.JButton();
        resultsCounterLabel = new javax.swing.JLabel();
        addContactLAL = new javax.swing.JLabel();
        addContactLAL.setVisible(false);
        addContactSuccessLabel = new javax.swing.JLabel();
        addContactSuccessLabel.setVisible(false);
        invalidInputLabel = new javax.swing.JLabel();
        invalidInputLabel.setVisible(false);
        usernameLAL = new javax.swing.JLabel();
        usernameLAL.setVisible(false);

        setBackground(COLOR_PAPAYA);
        setName("ADD_CONTACT_PANE"); // NOI18N

        newsPaneLabel.setBackground(new java.awt.Color(60, 59, 55));
        newsPaneLabel.setFont(new java.awt.Font("Serif", 1, 15)); // NOI18N
        newsPaneLabel.setForeground(java.awt.Color.white);
        newsPaneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newsPaneLabel.setText("Add a contact");
        newsPaneLabel.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        newsPaneLabel.setOpaque(true);

        searchUserButton.setText("Search for user");
        searchUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        jLabel2.setForeground(java.awt.Color.blue);
        jLabel2.setText("Users found :");

        usersFoundTable.setModel(new DefaultTableModel(results, columnNames));
        usersFoundTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        usersFoundTable.setShowHorizontalLines(false);
        usersFoundTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(usersFoundTable);

        addContactButton.setText("Add to my contacts");
        addContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactButtonActionPerformed(evt);
            }
        });

        resultsCounterLabel.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        resultsCounterLabel.setForeground(new java.awt.Color(230, 151, 13));

        addContactLAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/loading_circle_animation/21.gif"))); // NOI18N

        addContactSuccessLabel.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        addContactSuccessLabel.setForeground(new java.awt.Color(66, 185, 66));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("client/gui/Bundle"); // NOI18N
        addContactSuccessLabel.setText(bundle.getString("addContactSuccessLabel")); // NOI18N

        javax.swing.GroupLayout resultsPaneLayout = new javax.swing.GroupLayout(resultsPane);
        resultsPane.setLayout(resultsPaneLayout);
        resultsPaneLayout.setHorizontalGroup(
            resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resultsPaneLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultsCounterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPaneLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addContactSuccessLabel)
                            .addGroup(resultsPaneLayout.createSequentialGroup()
                                .addComponent(addContactButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addContactLAL)))
                        .addGap(56, 56, 56)))
                .addContainerGap())
        );
        resultsPaneLayout.setVerticalGroup(
            resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultsCounterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addContactButton)
                    .addComponent(addContactLAL))
                .addGap(18, 18, 18)
                .addComponent(addContactSuccessLabel)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        invalidInputLabel.setForeground(java.awt.Color.red);
        invalidInputLabel.setText("Not a username or email");

        usernameLAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/loading_circle_animation/21.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newsPaneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(invalidInputLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(searchUserField, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchUserButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(usernameLAL)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(newsPaneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserButton))
                .addGap(3, 3, 3)
                .addComponent(invalidInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameLAL)
                .addGap(4, 4, 4)
                .addComponent(resultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 40, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserButtonActionPerformed
        String userInput = searchUserField.getText();
        if (userInput.isEmpty()) {
            return;
        }

        boolean inputIsValid = Utils.isValidUsername(userInput) || Utils.isValidEmailAddress(userInput);

        if (inputIsValid) {
            invalidInputLabel.setVisible(false);
            searchUserButton.setEnabled(false);
            usersFoundTable.removeRowSelectionInterval(0, usersFoundTable.getRowCount());
            usernameLAL.setVisible(true);
            Message searchUserRequest = new Message(SEARCH_FOR_USER_REQUEST, userInput);
            R.getNm().send(searchUserRequest);
        } else {
            invalidInputLabel.setVisible(true);
        }
    }//GEN-LAST:event_searchUserButtonActionPerformed

    private void addContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactButtonActionPerformed
        int i = usersFoundTable.getSelectedRow();
        if (i != -1) {
            User u = responseUsers.get(i);
            AddContactRequest acr = new AddContactRequest();
            acr.setQuesterUserId(R.getU().getId());
            acr.setQuesterName(R.getU().getUsernameOrEmail());
            acr.setBody(""); // set all fields null except ids, convId         
            acr.setRecipientUserId(u.getId());
            acr.setRecipientName(u.getUsernameOrEmail());
            acr.setStatus(AddContactRequest.Status.BY_SOURCE);
            acr.setTimeSent(new Date());
            acr.setClientGenId(R.getRandom().nextInt());
            tempACRs.add(acr);
            Message m = new Message(ADD_CONTACT_REQUEST, acr);
            usernameLAL.setVisible(true);
            R.getNm().send(m);
        }
    }//GEN-LAST:event_addContactButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContactButton;
    private javax.swing.JLabel addContactLAL;
    private javax.swing.JLabel addContactSuccessLabel;
    private javax.swing.JLabel invalidInputLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel newsPaneLabel;
    private javax.swing.JLabel resultsCounterLabel;
    private javax.swing.JPanel resultsPane;
    private javax.swing.JButton searchUserButton;
    private javax.swing.JFormattedTextField searchUserField;
    private javax.swing.JLabel usernameLAL;
    private javax.swing.JTable usersFoundTable;
    // End of variables declaration//GEN-END:variables
    private String[] colNamesArray = {"Username", "Email", "Age"};
    private Vector<String> columnNames = new Vector<>(Arrays.asList(colNamesArray));
    private Vector<ARow> results = new Vector<>();
    private UsersList responseUsers;
    private List<AddContactRequest> tempACRs;

    private void populateResults(UsersList responseUsers) {
        results.clear();
        for (User u : responseUsers) {
            ARow arow = new ARow();
            arow.username = u.getUsername();
            arow.email = u.getEmail();
            arow.age = Utils.birthdateToAge(u.getBirthDate());
            results.add(arow);
        }
    }

    private class ARow {

        String username;
        String email;
        int age;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }

        OQueue q = (OQueue) o;
        final Message m = (Message) q.poll();
        AddContactRequest acrIn;

        switch (m.getCode()) {
            case SEARCH_FOR_USER_RESPONSE:
                responseUsers = (UsersList) m.getContent();
                populateResults(responseUsers);
                // Populate usersFoundTable
                break;

            case ADD_CONTACT_REQ_ACK:
                // SLA
                acrIn = (AddContactRequest) m.getContent();
                // Find message locally by client generated cmsg_id
                for (AddContactRequest tempACR : tempACRs) {
                    if (tempACR.getClientGenId() == acrIn.getClientGenId()) {
                        tempACRs.remove(tempACR);
                        break;
                    }
                }
                break;
        }


        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                switch (m.getCode()) {
                    case SEARCH_FOR_USER_RESPONSE:
                        usernameLAL.setVisible(false);
                        resultsCounterLabel.setText(results.size() + "");
                        searchUserButton.setEnabled(true);
                        // Populate usersFoundTable
                        break;

                    case ADD_CONTACT_REQ_ACK:
                        addContactLAL.setVisible(false);
                        addContactSuccessLabel.setVisible(true);
                        break;
                }
            }
        });


    }
}
