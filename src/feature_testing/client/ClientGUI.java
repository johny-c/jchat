/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package feature_testing.client;

import common.db.entity.ChatMessage;
import common.db.entity.Conversation;
import common.db.entity.FileTransfer;
import client.db.util.Database;
import common.pojos.Conventions;
import common.pojos.Message;
import common.pojos.OQueue;
import client.pojos.R;
import client.pojos.UserSettings;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;

/**
 *
 * @author johny
 */
public class ClientGUI extends javax.swing.JFrame implements Conventions, Observer, PropertyChangeListener {

    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        initComponents();
        R.getImh().subscribe(this);
    }

    //TODO: ASDAKDMFEM
    ClientGUI(R r) {
        this();
        this.r = r;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        historyPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputPane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        sendFileButton = new javax.swing.JButton();
        inviteButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(historyPane);

        jScrollPane2.setViewportView(inputPane);

        jPanel1.setBackground(new java.awt.Color(213, 187, 146));

        sendFileButton.setText("Send File");
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });

        inviteButton.setText("Invite others");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sendFileButton)
                        .addGap(40, 40, 40)
                        .addComponent(inviteButton)))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendFileButton)
                    .addComponent(inviteButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileButtonActionPerformed

        int returnVal = fc.showOpenDialog(ClientGUI.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileTransfer ft = new FileTransfer();
            ft.setSenderPath(fc.getSelectedFile().getAbsolutePath());
            ft.setFileName(fc.getName(fc.getSelectedFile()));
            ft.setFileSize((int) fc.getSelectedFile().length());
            //ft.setConversationId(conversation.getServerGenId());
            ft.setTimeSent(new Date());
            ft.setStatus(FileTransfer.Status.BY_SOURCE);
            ftToDo = ft;
            fileToSend = fc.getSelectedFile();
            Message m = new Message(FILE_SEND_REQ, ft);
            R.getNm().send(m);
        }

    }//GEN-LAST:event_sendFileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        new R();
        R.getNm().connect();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane historyPane;
    private javax.swing.JTextPane inputPane;
    private javax.swing.JButton inviteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton sendFileButton;
    // End of variables declaration//GEN-END:variables
    private Database db = new Database();
    private Conversation conversation = new Conversation();
    private List<ChatMessage> tempChatMessages = new ArrayList<ChatMessage>();
    private final JFileChooser fc = new JFileChooser();
    private FileInputStream fin;
    private R r;
    private File fileToSend;
    private FileTransfer ftToDo;

    @Override
    public void update(Observable o, Object arg) {

        R.log("ClientGUI observes incoming message");
        //R.log((String) arg);
        R.log(this.getClass().getSimpleName());
        String s = (String) arg;
        if (arg == null) {
            R.log("Arg null");
        } else {
            R.log("Arg not null");
        }

        if (!arg.equals(this.getClass().getSimpleName())) {
            return;
        }
        R.log("ClientGUI observes relevant incoming message");

        OQueue q = (OQueue) o;
        Message m = (Message) q.poll();
        R.log("ClientGUI observes " + m.getDescription());
        if (m == null) {
            return;
        }
        R.log("ClientGUI observes non-null message");
        int messageCode = m.getCode();
        FileTransfer fileIn = null;
        ChatMessage cmIn = null;
        Integer convIdIn;

        switch (m.getCode()) {
            case FILE_SEND_ACK:
            case FILE_SEND_REJECTION:
            case FILE_DELIVERY_REPORT:
                fileIn = (FileTransfer) m.getContent();
                convIdIn = fileIn.getConversationId();
                break;

            default:
                cmIn = (ChatMessage) m.getContent();
                convIdIn = cmIn.getConversationId();
                break;
        }

        // If the conversation id matches another tab ignore it
        //if (convIdIn != conversation.getServerGenId()) {
        //    return;
        //}
        switch (messageCode) {

            case CHAT_MSG_SEND_ACK:

                // Find message locally by client generated cmsg_id
                for (ChatMessage _cm : tempChatMessages) {
                    if (_cm.getClientGenId() == cmIn.getClientGenId()) {
                        tempChatMessages.remove(_cm);
                        break;
                    }
                }
                displayChatMessage(cmIn, false);
                break;

            case CHAT_MSG_DELIVERY:
                displayChatMessage(cmIn, true);
                break;

            case CHAT_MSG_DELIVERY_REPORT:
                displayReport(cmIn);
                break;

            case FILE_SEND_ACK:            // Start file upload
                R.log("Client: Received IN SWITCH" + m.getDescription());
                uploadFile(fileIn);
                break;

            case FILE_SEND_REJECTION:
                //showFileTransferRejectionDialog();
                break;

            case FILE_DELIVERY_REPORT:
                displayReport(fileIn);
        }

    }

    private void displayChatMessage(ChatMessage cm, boolean received) {
        StringBuilder builder = new StringBuilder();
        builder.append(cm.getTimeSent().toString());
        builder.append(" - ");
        if (received) {
            builder.append(cm.getSourceName());
        } else {
            builder.append(UserSettings.get(UserSettings.USERNAME, "Default username")); // message sent by me
        }
        builder.append(": ");
        builder.append(cm.getBody());
        builder.append("\n");
        putStringOnDisplay(builder.toString());
    }

    private void displayReport(ChatMessage cm) {
        String s = "\n -- MESSAGE DELIVERED to -- ";
        s += cm.getTargetName();
        s += "\n\n";
        putStringOnDisplay(s);
    }

    private void displayReport(FileTransfer f) {
        String s = "\n -- FILE DELIVERED to -- ";
        s += f.getTargetName();
        s += "\n\n";
        putStringOnDisplay(s);
    }

    private void putStringOnDisplay(final String string) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                int offset = historyPane.getStyledDocument().getLength();
                try {
                    historyPane.getStyledDocument().insertString(offset, string, null);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void uploadFile(FileTransfer fileTransfer) {

        sendFileButton.setEnabled(false);
        //progressBar = new JProgressBar(0, 100);
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        FileUploader task = new FileUploader(fileTransfer, ClientGUI.this);
        task.addPropertyChangeListener(this);
        task.execute();

    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }

        if ("state" == evt.getPropertyName()) {
            if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                progressBar.setVisible(false);
                sendFileButton.setEnabled(true);
                R.getNm().send(new Message(FILE_UPLOAD_COMPLETED, ftToDo));
            }
        }

    }
}
